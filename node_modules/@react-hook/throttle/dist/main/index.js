'use strict'

exports.__esModule = true
exports.default = exports.useThrottle = exports.useThrottleCallback = void 0

var _react = _interopRequireDefault(require('react'))

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj}
}

const {useEffect, useCallback, useState, useRef} = _react.default
const perf = typeof performance !== 'undefined' ? performance : Date

const now = () => perf.now()

const useThrottleCallback = (callback, fps = 30, leading = false) => {
  const wait = 1000 / fps
  const prev = useRef(0)
  const trailingTimeout = useRef(void 0)

  const clearTrailing = () => clearTimeout(trailingTimeout.current)

  const deps = [callback, fps, leading] // Reset any time the deps change

  function _ref() {
    prev.current = 0
    clearTrailing()
  }

  useEffect(() => _ref, deps)
  return useCallback(function here() {
    // eslint-disable-next-line prefer-rest-params
    const args = arguments
    const rightNow = now()

    const call = () => {
      prev.current = rightNow
      clearTrailing() // eslint-disable-next-line prefer-spread

      callback.apply(null, args)
    }

    const current = prev.current // leading

    if (leading && current === 0) return call() // body

    if (rightNow - current > wait) {
      if (current > 0) return call()
      prev.current = rightNow
    } // trailing

    clearTrailing()
    trailingTimeout.current = setTimeout(() => {
      // eslint-disable-next-line prefer-spread
      callback.apply(null, args)
      prev.current = 0
    }, wait)
  }, deps)
}

exports.useThrottleCallback = useThrottleCallback

const useThrottle = (initialState, fps, leading) => {
  const ref = useState(initialState)
  return [ref[0], useThrottleCallback(ref[1], fps, leading)]
}

exports.useThrottle = useThrottle
var _default = useThrottle
exports.default = _default
