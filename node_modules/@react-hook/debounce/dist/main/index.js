'use strict'

exports.__esModule = true
exports.default = exports.useDebounce = exports.useDebounceCallback = void 0

var _react = _interopRequireDefault(require('react'))

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj}
}

const {useCallback, useEffect, useState, useRef} = _react.default

const useDebounceCallback = (callback, wait = 100, leading = false) => {
  const timeout = useRef(void 0)
  const deps = [callback, wait, leading] // Cleans up pending timeouts when the deps change

  function _ref() {
    clearTimeout(timeout.current)
    timeout.current = void 0
  }

  useEffect(() => _ref, deps)

  function _ref2() {
    timeout.current = void 0
  }

  return useCallback(function () {
    // eslint-disable-next-line prefer-rest-params
    const args = arguments
    const current = timeout.current // Calls on leading edge

    if (current === void 0 && leading) {
      timeout.current = setTimeout(_ref2, wait) // eslint-disable-next-line prefer-spread

      return callback.apply(null, args)
    } // Clear the timeout every call and start waiting again

    clearTimeout(current) // Waits for `wait` before invoking the callback

    timeout.current = setTimeout(() => {
      timeout.current = void 0 // eslint-disable-next-line prefer-spread

      callback.apply(null, args)
    }, wait)
  }, deps)
}

exports.useDebounceCallback = useDebounceCallback

const useDebounce = (initialState, wait, leading) => {
  const _ref_0 = useState(initialState)

  const setState = _ref_0[1]
  const state = _ref_0[0]
  return [state, useDebounceCallback(setState, wait, leading)]
}

exports.useDebounce = useDebounce
var _default = useDebounce
exports.default = _default
